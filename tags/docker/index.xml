<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on kmistry&#39;s blog</title>
    <link>https://chemistryhuang.github.io/tags/docker/</link>
    <description>Recent content in docker on kmistry&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 09 Feb 2020 13:15:00 +0800</lastBuildDate>
    
	<atom:link href="https://chemistryhuang.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>docker使用教程（二）</title>
      <link>https://chemistryhuang.github.io/posts/docker%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B_2/</link>
      <pubDate>Sun, 09 Feb 2020 13:15:00 +0800</pubDate>
      
      <guid>https://chemistryhuang.github.io/posts/docker%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B_2/</guid>
      <description>本地镜像管理： build 从Dockerfile文件构建镜像 history 显示镜像的历史 images 管理镜像 import 从tarball导入内容以创建文件系统镜像 load 从tar存档或STDIN加载镜像 rmi 删除一个或多个镜像 save 将一个或多个镜像保存到t</description>
    </item>
    
    <item>
      <title>docker使用教程（一）</title>
      <link>https://chemistryhuang.github.io/posts/docker%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B_1/</link>
      <pubDate>Sun, 09 Feb 2020 13:14:00 +0800</pubDate>
      
      <guid>https://chemistryhuang.github.io/posts/docker%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B_1/</guid>
      <description>镜像仓库： login 登陆到一个Docker镜像仓库 logout 从一个Docker镜像仓库登出 pull 从注册处拉取一个镜像或者一个仓库 push 向注册处推送一个镜像或者一个仓库 search 在Docker Hub中搜索镜像 login 用法: docker login [OPTIONS] [SERVER] 登陆到一个</description>
    </item>
    
    <item>
      <title>docker搭建教程</title>
      <link>https://chemistryhuang.github.io/posts/docker%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link>
      <pubDate>Sat, 08 Feb 2020 13:18:00 +0800</pubDate>
      
      <guid>https://chemistryhuang.github.io/posts/docker%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid>
      <description>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何</description>
    </item>
    
  </channel>
</rss>